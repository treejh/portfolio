import { Project } from "../../types/project";

export const juseyo: Project = {
  id: "juseyo",
  title: "Juseyo (재고/자산 관리 플랫폼)",
  period: "2025.05.02 ~ 2025.06.02",
  description:
    "기업별 자산과 재고를 효율적으로 관리하고 요청·승인 프로세스를 자동화하는 재고 관리 플랫폼",
  longDescription: `
        Juseyo는 자산과 재고를 효율적으로 관리하고, 요청 및 승인 프로세스를 자동화하는 재고 관리 플랫폼입니다.
        단순한 자산 등록/조회 기능을 넘어, 부서별 자산 분류, 체계적인 요청 흐름, 실시간 재고 현황 파악까지 하나의 시스템 안에서 통합 관리할 수 있도록 설계되었습니다.
      `,
  role: "개발 팀장, 백엔드 개발, 프론트엔드 개발",
  github: "https://github.com/treejh/JUSEYO",
  liveDemo: "https://www.app.jusey0.site/",
  technologies: [
    "Java",
    "Spring Boot",
    "Spring Security",
    "MySQL",
    "React",
    "Next.js",
    "TypeScript",
    "Docker",
    "AWS EC2",
    "AWS S3",
    "NGINX",
    "Terraform",
    "GitHub Actions",
    "Redis",
    "Swagger",
    "JavaScript",
  ],
  features: [
    "🌟 부서 및 역할(Role) 기반 권한 관리",
    "🔄 요청 → 승인 → 반납 흐름 구조",
    "📊 실시간 상태 추적 및 Excel 입출력",
    "💬 SSE 기반 알림 & STOMP 기반 실시간 채팅",
    "🤖 사용자 맞춤 비품 추천 기능 구현",
    "회원 & 인증 - 역할 기반 회원가입, JWT 인증, 이메일 & 휴대폰 인증",
    "비품 관리 - 비품 등록/수정/삭제/조회, 요청 생성/승인/반려, 출고/입고 상태 추적",
    "실시간 채팅 - 1:1 / 고객센터 / 단체방, STOMP + SockJS + JWT 인증",
    "실시간 알림 - SSE 기반 실시간 알림, 역할 기반 이벤트 알림",
    "검색 및 추천 - 키워드/카테고리 기반 검색, 협업 필터링 알고리즘을 통한 비품 추천",
  ],
  challenges:
    "대규모 기업의 복잡한 자산 관리 프로세스를 효율적으로 자동화하고, 실시간 데이터 처리와 사용자 맞춤 추천 시스템을 구현하는 과정에서 성능 최적화에 도전했습니다.",
  lessons:
    "이 프로젝트를 통해 PM 역할을 수행하며 팀 관리와 프로젝트 기획의 중요성을 배웠습니다. 또한 복잡한 비즈니스 로직을 체계적으로 설계하고, 실시간 기능과 AI 추천 시스템을 구현하는 기술을 습득했습니다.",
  team: [
    { name: "황지윤", role: "PM" },
    { name: "장지현", role: "개발 팀장" },
    { name: "홍보람", role: "팀원" },
    { name: "근하람", role: "팀원" },
    { name: "이현석", role: "팀원" },
  ],
  myContributions: [
    {
      title: "회원 기능",
      details: [
        "로그인/인증 관리: JWT 기반 로그인 처리, 사용자 상태(정상/정지)에 따른 접근 제어",

        "세션 유지: Access Token + Refresh Token 구조(RTR 방식), Refresh Token은 Redis에 저장 및 만료 시 자동 삭제",

        "회원 등급/권한: 최초 매니저 / 일반 매니저 / 일반 회원 3단계 구분",

        "회원 승인 절차: 최초 매니저는 일반 매니저 승인, 매니저(최초/일반)는 일반 회원 승인 가능",
        // "JWT 인증 기반 로그인 처리 구현 및 사용자 상태(정상/정지)에 따른 접근 제어 필터 적용",
        // "RTR 방식의 인증 구조 적용: Access Token + Refresh Token 구조로 로그인 세션 유지",
        // "Refresh Token은 Redis에 저장하고 만료 시간에 따라 자동 삭제되도록 설정",
        // "회원 등급/권한 관리 로직: 최초 매니저 / 일반 매니저 / 일반 회원 3단계로 구분하여 처리",
        // "회원 승인 절차: 최초 매니저는 일반 매니저 가입 승인, 매니저(최초/일반)는 일반 회원 가입 승인 가능",
      ],
    },
    {
      title: "인증 기능",
      details: [
        "이메일 인증: Google SMTP를 활용한 이메일 인증 기능 구현 (회원가입 및 인증번호 검증)",
        "휴대폰 인증: 누리고 SMS API를 활용한 휴대폰 본인 인증 및 인증번호 검증 기능 개발",
        "임시 인증번호(이메일/휴대폰)는 Redis에 저장하여 만료 및 재사용 방지",
      ],
    },
    {
      title: "비밀번호 재설정",
      details: [
        "임시 비밀번호 발송: 재설정 요청 시 이메일 발송",

        "검증 후 재설정: 이메일 인증번호 검증 후 비밀번호 변경 가능",

        "보안 강화: 임시 비밀번호/인증번호 Redis 저장",
        // "비밀번호 재설정 요청 시, 인증 메일을 통해 임시 비밀번호 발송",
        // "이메일 인증번호 검증 후 비밀번호 재설정 가능하도록 구현",
        // "임시 비밀번호/인증번호는 Redis에 저장하여 보안성 강화",
      ],
    },
    {
      title: "STOMP 기반 실시간 채팅 기능",
      details: [
        "채팅방 관리: 1:1·그룹·고객센터 채팅방 생성 및 중복 방지, 입장/나가기, 메시지 송수신 등 실시간 흐름 구현",
        "메시지 처리: STOMP + SockJS를 활용한 WebSocket 구조 설계, JWT 쿠키 기반 인증 및 권한 검증",
        "사용자 경험: 마지막 입장 기준 NEW 뱃지 표시, 참여자 목록/상대방 정보/새 메시지 여부 조회 API 제공",
        "고객센터 매칭: 전용 채팅방에 랜덤 매니저 매칭 로직 포함",
        "데이터 관리: MySQL을 통한 메시지·채팅방·참여자 영속화, Redis 기반 지연 삭제로 비효율 최소화",
        // "1:1 / 그룹 / 고객센터 채팅방 생성 기능 구현 (중복 채팅방 방지 로직 포함)",
        // "채팅방 입장, 나가기, 메시지 송수신 등 전반적인 실시간 채팅 흐름 구현",
        // "STOMP + SockJS를 활용한 WebSocket 메시지 처리 구조 설계",
        // "JWT 쿠키 기반 세션 인증 및 사용자별 메시지 권한 검증",
        // "마지막 입장 시간 기준으로 ‘NEW’ 뱃지 표시 여부 계산 기능 구현",
        // "채팅방의 참여자 목록, 상대방 정보, 새 메시지 여부 등의 조회 API 제공",
        // "고객센터 전용 채팅방에서는 랜덤 매니저 매칭 로직 포함",
        // "메시지, 채팅방, 참여자 정보는 모두 RDS(MySQL)에 영속화하여 기록 관리",
        // "사용자가 모두 퇴장한 채팅방은 Redis를 활용해 자동 삭제 예약 처리 (지연 삭제)",
        // "채팅방 상태(ENTER, CREATE, INVITED 등)에 따른 행동 제어 및 예외 처리 로직 구현",
      ],
    },
    {
      title: "S3 기반 이미지 업로드 및 삭제 기능",
      details: [
        "업로드/삭제 기능: 이미지 업로드 및 삭제 처리, 고유 파일명(UUID)으로 충돌 방지",

        "파일 처리: Content-Type 지정으로 자동 다운로드 방지, PublicRead 권한 부여로 웹 접근 가능",

        "결과 반환: 업로드 완료 시 S3 이미지 URL 반환, 삭제 시 키값 추출 후 객체 제거",

        "예외 처리: 삭제 실패 등 상황에 대한 BusinessLogicException 적용",
        // "Amazon S3를 활용한 이미지 업로드 및 삭제 기능 구현",
        // "시간 기반 UUID를 이용해 고유한 파일명을 생성하여 충돌 방지",
        // "파일 업로드 시 Content-Type을 명시하여 브라우저 내 자동 다운로드 현상 방지",
        // "업로드된 파일은 `PublicRead` 권한을 적용해 웹에서 바로 접근 가능하도록 설정",
        // "업로드 완료 후 S3에 저장된 이미지의 URL 반환",
        // "이미지 삭제 시 `.com/` 경로 이후 키값을 추출하여 S3 객체 삭제 수행",
        // "예외 상황(삭제 실패 등)에 대해 커스텀 `BusinessLogicException` 처리 적용",
      ],
    },
    {
      title: "프로젝트 기술 총괄",
      details: [
        "회원가입, 로그인, 채팅 등 주요 기능 화면 디자인 직접 설계 및 프론트 구현 연동",
        "에러 발생 시 팀 내 주요 기술 이슈 직접 디버깅 및 해결, 개발 총괄 역할 수행",
        "팀 내 프론트/백엔드 개발 가이드 제시 및 기능 구현 방향성 주도",
      ],
    },
  ],
  reflections: [
    {
      title: "기술 설계와 시스템 구조 경험",
      details: [
        "ERD를 직접 설계하고 전체 기능 구현 방향을 조율하며, 도메인 분석과 테이블 구조가 시스템 확장성과 유지보수에 미치는 영향을 깊이 체감했습니다.",
        "초기 설계의 탄탄함이 이후 기능 개발과 유지보수의 혼선을 줄인다는 점을 실감했습니다.",
      ],
    },
    {
      title: "문제 해결과 기술적 리더십",
      details: [
        "개발 팀장으로서 팀원별 기능 분배와 구현 방식을 조율하며, 한 기능이 전체 시스템에 미치는 영향까지 고려하는 거시적 시야의 필요성을 배웠습니다.",
        "팀원들의 기술적 이슈와 에러를 함께 해결하며, 단순히 문제를 고치는 것을 넘어 원인 분석과 방향성 제시의 중요성을 체감했습니다.",
        "문제 해결 과정에서 리더십과 지식 공유의 가치를 다시 한 번 느꼈습니다.",
      ],
    },
    {
      title: "커뮤니케이션과 협업 문화",
      details: [
        "팀 분위기를 주도하고 적극적으로 소통하며, 활발한 커뮤니케이션이 협업 효율과 프로젝트 완성도에 큰 영향을 준다는 것을 배웠습니다.",
        "기술 외적인 부분도 팀 전체의 성과에 중요한 역할을 한다는 점을 경험했습니다.",
      ],
    },
    {
      title: "발표 및 커뮤니케이션",
      details: [
        "최종 발표를 직접 맡아 기획 의도부터 기술 구현까지 전체 흐름을 정리하고 전달했습니다.",
        "Q&A 시간에는 다양한 질문에 대응하며, 프로젝트에 대한 기술적 이해도와 설득력 있는 커뮤니케이션의 중요성을 실감했습니다.",
        "팀을 대표해 발표하고 소통하는 경험을 통해 리더로서의 책임감과 자신감을 키울 수 있었습니다.",
      ],
    },
  ],
  thumbnail: "/images/project-thumb.jpg",
};
